// exception for division by zero condition
#include <iostream>
using namespace std; 
int main()
{
 int a,b;
 cout<<"Enter two number: -\n";
 cin>>a>>b;
 try
 {
 if(b!=0)
 cout<<"Division = "<<a/b;
 else
 throw b;
 }
 catch(int i)
 {
 cout<<"Exception caught: Division by Zero";
 }
 return 0;
}

//catch default exception for any given condition
#include <iostream>
using namespace std;
int main()
{
 int a;
 cout<<"Enter your Age: -\n";
 cin>>a;
 try
 {
 if(a>0)
 cout<<"Age = "<<a;
 else
 throw a;
 }
 catch(int i)
 {
 cout<<"Exception caught";
 }
 return 0;
}

//implement multiple try catch exception for any given condition
#include <iostream>
using namespace std;
int main()
{
 int a,b;
 float d;
 cout<<"Enter two numbers: -\n";
 cin>>a>>b;
 try
 {
 if(b!=a)
 {
 d=float(a/b);
 
 if(d<=0)
 throw 'e';
 cout<<d;
 }
 else
 throw b;
 }
 catch(int i)
 {
 cout<<"Exception caught: Division by zero";
 }
 catch(char st)
 {
 cout<<"Exception caught: Division is less than 1";
 }
 return 0;
}

//throw exception by catching object as parameter inside catch block
#include <iostream>
using namespace std;
class Test {
public:
Test() { cout << "Constructor of Test " << endl; }
~Test() { cout << "Destructor of Test " << endl; }
};
int main()
{
try {
Test t1;
throw 10;
}
catch (int i) {
cout << "Caught " << i << endl;
}
}

//re throw exception within exception handler
#include <iostream>
using namespace std;
struct E {
const char* message;
E() : message("Class E") { }
};
struct E1 : E {
const char* message;
E1() : message("Class E1") { }
};
struct E2 : E {
const char* message;
E2() : message("Class E2") { }
};
void f() {
try {
cout << "In try block of f()" << endl;
cout << "Throwing exception of type E1" << endl;
E1 myException;
throw myException;
}
catch (E2& e) {
cout << "In handler of f(), catch (E2& e)" << endl;
cout << "Exception: " << e.message << endl;
throw;
}
catch (E1& e) {
cout << "In handler of f(), catch (E1& e)" << endl;
cout << "Exception: " << e.message << endl;
throw;
}
catch (E& e) {
cout << "In handler of f(), catch (E& e)" << endl;
cout << "Exception: " << e.message << endl;
throw;
}
}
int main() {
try {
cout << "In try block of main()" << endl;
f();
}
catch (E2& e) {
cout << "In handler of main(), catch (E2& e)" << endl;
cout << "Exception: " << e.message << endl;
}
catch (...) {
cout << "In handler of main(), catch (...)" << endl;
}
}
